---
title: 'Comment installer git & Github sur macOS, Linux & Windows ?'
description: R√©capitulatif sur les diff√©rentes configurations √† mettre en place pour travailler efficacement avec git et GitHub. Ajout de fichier de configuration et association des clefs SSH
page_title: Am√©liorer sa productivit√© avec git
page_emphasis: '√áa ne co√ªte pas plus cher de bien travailler'
page_class: m-good-practice
changefreq: monthly
priority: 0.6
---

.row
  .medium-10.medium-centered.columns
    markdown:
      ## Configurer git

      La premi√®re √©tape est d'ouvrir un terminal et de cr√©er un nouveau fichier.

      ~~~zsh
        $ touch .gitconfig
      ~~~

      Ouvrez le fichier cr√©√© avec `vim .gitconfig` ‚Äî ou tout autre √©diteur de texte ‚Äî et collez les lignes ci-dessous :

      ~~~zsh
        [user]
          name = David Leuliette
          email = dleuliette@gmail.com

        [color]
          ui = auto
        [color "branch"]
          upstream = cyan

        [alias]
          poule = pull --rebase
          co = checkout
          ci = commit
          br = branch
          today = log --since=midnight --author='David Leuliette' --oneline
          lg = log --graph --date=relative --pretty=tformat:'%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%an %ad)%Creset'
          oops = commit --amend --no-edit

        [push]
          # Default push should only push the current branch to its push target, regardless of its remote name
          default = current
          # When pushing, also push tags whose commit-ishs are now reachable upstream
          followTags = true

        [diff]
          # Use better, descriptive initials (c, i, w) instead of a/b.
          mnemonicPrefix = true
          # Show renames/moves as such
          renames = true
          # When using --word-diff, assume --word-diff-regex=.
          wordRegex = .
          # Display submodule-related information (commit listings)
          submodule = log

        [log]
          # Use abbrev SHAs whenever possible/relevant instead of full 40 chars
          abbrevCommit = true
          # Automatically --follow when given a single path
          follow = true
      ~~~
    .m-section
      .row
        .medium-10.medium-centered.columns
          markdown:
            ### Des raccourcis tr√®s utiles
            Il existe de nombreux sites qui r√©pertorient __les trucs & astuces__ les [plus couramment utilis√©s avec git](https://github.com/git-tips/tips#everyday-git-in-twenty-commands-or-so).<br>
            Personellement j‚Äôutilise [gitextras](https://github.com/tj/git-extras/blob/master/Commands.md).
          .m-panel
            .m-section--card
              .l-icon
                i.fa.fa-2x.fa-apple
              .l-content
                markdown:
                  ~~~zsh
                    $ brew install git-extras
                  ~~~
          .m-panel
            .m-section--card
              .l-icon
                i.fa.fa-2x.fa-linux
              .l-content
                markdown:
                  ~~~zsh
                    $ sudo apt-get install git-extras
                  ~~~

    .m-section
      markdown:
        ## Associer son compte GitHub

        Vous n‚Äôavez pas encore enregistr√© votre compte GitHub? [Faites-le tout de suite](https://github.com/join).

        üëâ **[Uploadez votre avatar](https://github.com/settings/profile)** et √©crivez votre nom complet correctement sur votre compte GitHub. C‚Äôest important pour que nous puissions tous travailler ensemble.

        üëâ Allez sur votre [Compte GitHub](https://github.com/settings/emails) et utilisez le m√™me email que celui de votre fichier `.gitconfig`.


      .row
        .medium-10.medium-centered.columns
          .m-panel
            .m-section--card
              .l-icon
                i.fa.fa-2x.fa-apple
                br
                small only
              .l-content
                markdown:
                  ### The lazy way

                  ~~~zsh
                    $ git config --global credential.helper osxkeychain
                  ~~~

      markdown:
        ### Cr√©er une cl√© SSH

        Suivez les 4 √©tapes ci-dessous pour [g√©n√©rer une cl√© SSH](https://help.github.com/articles/generating-an-ssh-key/){:target="_blank"}

        ~~~zsh
          $ ls -al ~/.ssh
          # Lists the files in your .ssh directory, if they exist
        ~~~

        #### G√©n√©rer une nouvelle cl√© SSH

        ~~~zsh
          $ ssh-keygen -t rsa -b 4096 -C "your_email@example.com"
          # Creates a new ssh key, using the provided email as a label
          Generating public/private rsa key pair.
        ~~~

        #### Ajouter votre cl√© SSH au ssh-agent

        ~~~zsh
          # start the ssh-agent in the background
          $ eval "$(ssh-agent -s)"
          Agent pid 59566
        ~~~

        ~~~zsh
          $ ssh-add ~/.ssh/id_rsa
        ~~~

        ### Lier votre cl√© SSH √† votre compte GitHub

        ~~~zsh
          $ pbcopy < ~/.ssh/id_rsa.pub
          # Copies the contents of the id_rsa.pub file to your clipboard
        ~~~

        Sur [github.com](http://github.com){:target="_blank"}, dans le coin droit, cliquez sur votre image de profil, puis sur Settings pour [ajouter une cl√© SSH √† votre compte](https://help.github.com/articles/adding-a-new-ssh-key-to-your-github-account/){:target="_blank"}.

        ### Tester votre connection SSH

        ~~~zsh
          $ ssh -T git@github.com
          # Attempts to ssh to GitHub
        ~~~

    .row
      .medium-10.medium-centered.columns
        markdown:
          ## Outils de base
        h3
          .i-custom.icon-command-promt-1
          'Terminal
        .m-panel
          .m-section--card
            .l-icon
              i.fa.fa-2x.fa-apple
            .l-content
              markdown:
                [iterm](http://www.iterm2.com/){:target="_blank"} c‚Äôest comme le terminal de base de macOS, mais en mieux.<br>
                _Exemple_ : vous pouvez splitter vos √©crans de fa√ßon horizontale et verticale avec `cmd` + `d` ou `cmd` + `shift` + `d`
        .m-panel
          .m-section--card
            .l-icon
              i.fa.fa-2x.fa-windows
            .l-content
              markdown:
                [babun](http://babun.github.io/){:target="_blank"} le ‚Äúmoins pire‚Äù qu‚Äôon puisse faire sur Windows et la seule fa√ßon de survivre si l‚Äôon est oblig√© de bosser avec cet os.
        br
        br
        h3
          = fa 'fa-fw fa-clock-o'
          'Raccourcis pour gagner du temps
        .m-panel
          .m-section--card
            .l-icon
              i.fa.fa-2x.fa-apple
              i.fa.fa-2x.fa-linux
            .l-content
              markdown:
                [oh-my-zsh](http://github.com/robbyrussell/oh-my-zsh){:target="_blank"} Vous allez adorer utiliser un terminal ! √Ä chaque fois que vous interagissez avec votre invite de commande, vous serez en mesure de tirer parti des centaines de plugins install√©s avec un joli th√®me.

    .m-section
      .row
        .medium-10.medium-centered.columns
          markdown:
            ## Visualiser son travail

          .m-panel
            .m-section--card
              .l-icon
                i.fa.fa-2x.fa-apple
              .l-content
                markdown:
                  [GitX-dev](http://rowanj.github.io/gitx/){:target="_blank"} une interface pour rapidement revoir son code avant de commiter.

          .m-panel
            .m-section--card
              .l-icon
                i.fa.fa-2x.fa-linux
              .l-content
                markdown:
                  __gitg__ est un clone de GitX pour gtk+/GNOME

                  ~~~zsh
                    $ apt-get install gitg
                  ~~~

section.m-section
  .row
    .medium-10.medium-centered.columns.text-center
      markdown:
        ## Aller plus loin avec git et GitHub
        En tant que __coach__, je partage mes connaissances avec le plus grand nombre.
      = link_to 'http://courses.davidl.fr/programs/git-github.html', class: 'button secondary' do
          'Programme de formation git & GitHub
