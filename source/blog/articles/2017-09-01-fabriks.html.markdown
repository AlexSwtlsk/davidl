---
date: 2017-09-01
slug: fabriks
title: Plateforme e-commerce ultra rapide avec React.js et Next.js
description:
image:
page_title: La meilleure exp√©rience utilisateur possible‚Ä¶
page_emphasis: ‚Ä¶associ√© au plus grand nombre de produits disponibles
---

__Pain point__ : Il n'existe pas de moyen simple de contacter n'importe quel fabricant et de lui acheter ses produits.

Les fabricants assistent √† des salons physiques et il n'existe pas d'√©quivalent en ligne.

Face √† ce constat, [Karl](https://www.linkedin.com/in/karl-leicht-208675104/) et [Alexis](https://www.linkedin.com/in/alexis-messier-89286127/) ont lanc√© [Fabriks.net](https://fabriks.net/) : une plateforme qui liste les produits des fabricants et qui permet de les contacter directement.

> La mani√®re la plus simple possible d'√™tre contact√© sans interm√©diaire

Dans cette √©tude de cas, je vais vous partager comment ils ont eu l'id√©e pour la cr√©ation de la plateforme, o√π nous avons trouv√© l'inspiration, comment nous avons tout d√©velopp√©, comment est-ce utilis√© chez ______________ comme outil interne et comment seront financ√©s les futures fonctionnalit√©s

Voici une pr√©sentation de l'article :

1. Structure de base et fonctionnalit√©s
1. Creation du design
1. Developp√© √† partir de solides projets open source
1. Lancement
1. Business model du produit
1. Backlog des developements futurs

Bien sur, ce ne sera plus un secret car je vais les partager avec vous. üôà

## Structure de base et fonctionnalit√©s

Aujourd'hui le focus est mis sur l'univers du meuble au sens large (meuble, d√©co, outdoor, pro, h√¥tels, restaurants, entreprises, h√¥pitaux) et il y d√©j√† beaucoup √† faire l√†-dessus.

Contraintes

- Simplifier l'interface au maximum malgr√© un grand nombre de data
- Hierarchiser l'information
- Responsive sur une interface de recherche
- Environnement JavaScript moderne, modulable et √©volutif

## Creation du design

Comme vous ne r√©inventez pas la roue, vous devez regarder autour des entreprises qui cr√©ent de bons produits pour obtenir de l'inspiration (comme Heroku, Slack, Mailchimp, Stripe). Regardez aussi vos concurents. Vous obtiendrez beaucoups d'informations.

> Si j'avais 6 heures pour couper un arbre,<br> je passerai les 4 premi√®res heures √† aiguiser ma hache.
> <cite>Abraham Lincoln</cite>

Quand vous commencerez, cela sera plus facile de developper votre produit car vous aurez fait vos devoirs. Vous devez aiguiser votre hache avant de commencer :

http://www.pages.xyz/type/store

Vous avez maintenant une bonne liste d'inspiration, avec beaucoups de couleurs, d'animations, des icones magnifiques, en mise en page avec une sidebar fixe ou non et encore des centaines d'autres fonctionnalit√©s

Comment savoir quelles sont les meilleures pour votre audience ?

Comme nous ne savions pas ce que les gens voulaient, nous avons d√©cid√© d'√©crire toutes les fonctionnalit√©s contenues dans ces sites et d'utiliser uniquement les plus r√©pandues.
Nous avons r√©alis√© que les fonctionnalit√©s principales r√©solvent environ 95% des cas. Les 5% restants r√©solvent des probl√®mes tr√®s sp√©cifiques.

Les elemesnts de bases sont buttons, icons, typography, sidebar, main panel, navbars and dropdowns.

https://github.com/designhacker/clone-secret-website

Les fonctionnalit√©s sp√©cifiques sont :

- Notifications
- Newsletter

## D√©velopp√© √† partir de solides projets open source

### Le Why

Sur un projet tel que fabriks.net, le server-side-rendering (SSR) n'est pas une option √† cause du r√©f√©rencement sur Google.
Ceci signifie que les pages qui sont traditionnellement g√©n√©r√©es par le navigateur de l'utilisateur le sont par le serveur.

### D√©couverte de Next.js ou la cominaison r√©ussie entre SSR et SPA



Next.js est un framework bas√© sur React.js et qui permet de faire *simplement* du server-side-rendering.
Contrairement √† React.js, qui est une librairie, Next.js est un framework et donc fait un certain nombre de postulats de d√©part qu'il est difficile de changer ensuite.

Par exemple, les pages sont dans un dossier /pages, les styles dans /styles, etc. Le gain est la simplicit√© du build et de la config. Fini les prises de t√™te pour configurer Webpack version X avec Babel version Y etc.

La principale complexit√© vient de la gestion du routeur, ou devrais-je dire, des routeurs. On a tout d'abord un routeur c√¥t√© serveur qui route / vers la page index.js, /products ver la page products.js etc. On a aussi un routeur c√¥t√© client qui charge les composants de la page suivante. C'est dans le lien entre ces deux routeurs que r√©side le b√©n√©fice de Next.js:

1. Le b√©n√©fice du SSR: premi√®re page charg√©e rapidement, crawlabilit√© par Google, etc
1. Le b√©n√©fice de la Single Page Application: transition fluide car on ne charge que les bouts manquants (absence de blink √† la PHP)

Ce lien se manifeste au travers de la m√©thode `getInitialProps()` qui s'√©x√©cute au moment du routage.

###¬†Les feuilles de style

Le choix de foundation qui a une meilleur s√©mantique et √©volutivit√© que Bootstrap. Build bas√© sur `Sass` et des variables globales, etc.

Un probl√®me rencontr√©: les styles globaux ne s'accordent pas bien avec la philosophie "component".

Les styled-components qui permettent d'__inclure facilement du style__ dans chaque component.


## Lancement

## Le business model du produit

## Backlog des developements futurs



# A caser

- Fabriks, c'est aussi l'histoire d'un grossite japonais qui ach√®te √† un fabricant danois sur un site fran√ßais √©cris en anglais.

- Marketing: Les pubs ne fonctionnent plus. Aujourd'hui le vrai marketing, c'est le produit en lui-m√™me, capable de d√©livrer la proposition de valeur NOW.
